DEF:  (divide and concqure)
   Merge sort is defined as a sorting algorithm that works by dividing an array into smaller subarrays,
   sorting each subarray,
   and then merging the sorted subarrays back together to form the final sorted array.
   
WHY?
    already have a number of sorting algorithms then why do we need this algorithm?
        One of the main advantages of merge sort is that it has a time complexity of O(n log n),
        which means it can sort large arrays relatively quickly. 
        It is also a stable sort, which means that the order of elements with equal values is preserved during the sort.
        It is often used in conjunction with other algorithms, such as quicksort, to improve the overall performance of a sorting routine.
        
IMPLEMENTATIONS:
       import java.util.*;
       public class Main
       {
	public static void main(String[] args) {
	    Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int a[] = new int[n];
		for(int i=0;i<n;i++)
		{
		    a[i] = sc.nextInt();
		}
		MergeSort(a,0,n-1);     a-array 0-starting index   n-1--size of array
		for(int i=0;i<n;i++)
		{
		    System.out.print(a[i]+" ");
		}
	}
	//BinarySearch
	public static void MergeSort(int[] a,int low ,int high)
	{
	    if(high == low)
	    {
	        return ;
	    }
	    int mid = low+(high-low)/2;     // to reduce the overflow we add low
	    MergeSort(a,low,mid);
	    MergeSort(a,mid+1,high);
	    Merge(a,high,mid,low);
	}
	
	//merge2sortedArrays
	public static void Merge(int[] a,int high,int mid,int low)
	{
	    int i = low,j=mid+1;
	    int m[] = new int[high+1];
	    int k = low;
	    while(i<=mid && j<=high)
	    {
	        if(a[i] > a[j])
	        {
	            m[k++] = a[j];
	            j++;
	        }
	        else{
	            m[k++] = a[i];
	            i++;
	        }
	    }
	    while(i<=mid)
	    {
	        m[k++] = a[i++];
	    }
	    while(j<=high)
	    {
	        m[k++] = a[j++];
	    }
	    
	    for(int index=low;index<=high;index++)
	    {
	        a[index] = m[index];
	    }
	}
}

Advantages of Merge Sort:
        *)Stability
        *)Guaranteed worst-case performance
        *)Parallelizable:
        *)Memory efficient
        
DISADVANTAGE OF MERGE
        *)Space complexity
        *)Recursive algorithm
        *)Not always optimal for small datasets
        *)Complexity of implementation:
        
