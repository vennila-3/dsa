DEF:It is also known as “partition exchange sort”

it is like merge sort use divide and conqure.
QuickSort is a sorting algorithm based on the Divide and Conquer algorithm 
that picks an element as a pivot and partitions the given array 
around the picked pivot by placing the pivot in its correct position in the sorted array.


PIVOT:

 Quicksort picks an element as pivot, and then it partitions the given array around the picked pivot element. 
 In quick sort, a large array is divided into two arrays in which one holds values
 that are smaller than the specified value (Pivot), and another array holds the values that are greater than the pivot.
 WHY?
    it partitions (or divides) the larger unsorted collection into two, smaller lists.
 
**)start less then end th do swap start and end
**) if end greater hen start swap pivot(first value) and end
**) not faster method

 
MAX_VALUE is a number in the Java Integer сlass of java. lang package. It is the maximum possible Integer number that can be represented in 32 bits.
Integer.MAX_VALUE = 2147483647  


implementation:

import java.util.*;
public class Main
{ 
 static int partition (int a[],int low,int high)
 {
  int piv=a[low],i=low,j=high;
  do{
   do{
      i++; 
   }while(a[i]<=piv);
   do{
      j--; 
   }while(a[j]>piv);
   if(a[i]<a[j])
   {
    int temp=a[i]; //swapping ith and jth index value
    a[i]=a[j];
    a[j]=temp;
   }
 }while(i<j);
 a[low]=a[j]; //swapping jth index value&pivot element
 a[j]=piv;
 return j;
 }
 static void quicksort(int a[],int low,int high)
{
  if(low<high)
  {
   int j=partition(a,low,high);
   quicksort(a,low,j);//recursive call for left of pivot
   quicksort(a,j+1,high);//recursive call for right of pivot
  }
}


public static void main(String[] args) { 
Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
int arr[]=new int[n+1];
for(int i=0;i<n;i++)
arr[i]=sc.nextInt();
arr[n]=Integer.MAX_VALUE;
quicksort(arr,0,n);
for(int i=0;i<n;i++)
System.out.println(arr[i]);
	}
}










quick vs merge
The partition of elements in the array	
The splitting of a array of elements is in any ratio, not necessarily divided into half.   -quick
In the merge sort, the array is parted into just 2 halves (i.e. n/2).                      -merge

Worst case complexity
O(n^2)	
O(nlogn)

Works well on	
It works well on smaller array	
It operates fine on any size of array

Speed of execution
It work faster than other sorting algorithms for small data set like Selection sort etc
It has a consistent speed on any size of data

Additional storage space requirement	
Less(In-place)
More(not In-place)

Efficiency
Inefficient for larger arrays
More efficient

Sorting method
Internal	
External

Stability	
Not Stable
Stable

Preferred for
for Arrays
for Linked Lists

Major work
The major work is to partition the array into two sub-arrays before sorting them recursively.
Major work is to combine the two sub-arrays after sorting them recursively.

Division of array 
Division of an array into sub-arrays may or may not be balanced as the array is partitioned around the pivot.
Division of an array into sub array is always balanced as it divides the array exactly at the middle.

Space 
Quicksort does not require additional array space.	
For merging of sorted sub-arrays, it needs a  temporary array with the size equal to the number of input elements.
